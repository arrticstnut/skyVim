
git提交
----------------------------------------------------------------------

文件中中文较多时，查看文件编码格式，防止在gitk中显示乱码 {{{1
file 文件名
在Vim 中查看 文件编码
    :set fileencoding
在Vim中转换文件编码， 转换成utf-8格式
:set fileencoding=utf-8

----------------------------------------------------------------------

提交代码两步: {{{1
1. 本地修改添加到缓存区，缓存区修改提交到HEAD
    git pull && git status
    ---同步并显示修改文件路径

    git add private/a10/JX_s07_KS/vendor/sprd/GSTCustomize
	git add -A .
	git add -A :/
    ---要提交的本地修改添加到缓存区;  空格隔开多个文件路径

    git commit -m "[GST05][JX_S07_KS]增加客户的开关机动画铃声/客户提供的apk"
    ---将本地缓存区内容提交到本地HEAD中
    "代码提交信息"：“【GST01】【项目名称】修改的内容”(GST01：代码优化)

    git diff HEAD
    ---显示最后一次提交之后的所有变更。(包括变更的和未变更的)
    gitk &
    ---图形界面查看添加的内容。
        (1)如果有漏添加的修改：
        1)用git status查看漏提交的修改。
        2)git add private 漏提交修改的文件
        3)gitk 确认要提交的本地修改全部添加到缓存区

         (2)修改提交信息：git commit --amend
                ---修改最后一次提交的信息(未push过)
 2.同步后提交到远端
    git pull --rebase origin &&  git push
    ---同步，并重新基于当前分支将本地修改移至节点树的最前面;
        (origin 可省略)
    ---将本地仓库HEAD 中的改动提交到远端仓库
    gitk &
    检查确认一下
此时.若无冲突，结束。
----------------------------------------------------------------------
gitk查看，若出现分支，显示merge： {{{1
        git reset --hard 分支出现前的节点
                本地HEAD重置为这个节点，
        再git pull同步一下代码。
----------------------------------------------------------------------
若有冲突，提示错误。执行：{{{1
1. git stash
    >>>将冲突放一边（暂且这么说）
2. git pull --rebase origin
    >>>重新来过
    git push
    >>>重新来过，此时就不会有冲突了
    gitk &
    >>>查看一下
3. git stash pop
    >>>提交完成后执行

======================================================================
替换掉本地错误改动：{{{1
    git checkout -- <filename>
使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，
以及新文件，都不受影响。
======================================================================
commit 后发现有错误：{{{1

丢弃所有的本地改动与提交，获取服务器上最新版本并将本地主分支指向它：
    git fetch origin
    git reset --hard origin/master
----------------------------------------------------------------------
commit后发现有漏修改或漏commit的文件 {{{1
    git reset --soft：回退到某个版本，只回退了commit的信息，不会恢复到
	index file一级。如果还要提交，直接commit即可
----------------------------------------------------------------------
git删除错误提交的commit{{{1

	git reset --hard <commit_id>
	git push origin HEAD --force

其他:
    –soft –mixed –hard，对working tree和index和HEAD进行重置:

    git reset –mixed：默认，不带参数的git reset，即这方式，它回退到某个版本，只保
	留源码，回退commit和index信息

    git reset –soft：回退到某个版本，只回退commit的信息，不会恢复到index file一级。
	如果还要提交，直接commit即可.

    git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容.


    HEAD 最近一个提交
    HEAD^ 上一次
    <commit_id> 每次commit的SHA1值.

----------------------------------------------------------------------
git 合并分支上指定的commit{{{1
	git checkout master
	git cherry-pick 3b6360
----------------------------------------------------------------------
整体更新代码，全编 {{{1
在工程根目录下：
git clean -df     (删除没有 git add 的 目录 和 文件)
git chekout .     撤消对文件的修改
git pull          从服务器 pull（同步）新的改动

拷贝私有到main目录下
----------------------------------------------------------------------
查看git地址: {{{1
git remote -v



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
intel提交代码命令：{{{1
VR_MRD


一、建立本地分支（必须）
	repo start  --all xxx
	repo start xxx .
二、在本地分支下进行上传：
	1、git status (查看修改状态)
	2、git add （将要提交的文件添加进缓存）
	3、git commit （写添加改动信息）
		git commit -s   在改动信息中添加 修改人信息
		在 commit 中要写明修改原因，修复什么样的问题，
		在Tracked-on：中要写修复bug的链接，或者bug号
	4,提交修改：
		repo upload


git 命令：

	git am xxx.patch
	(xxx.patch 是由 git format-patch 生成的)

	git commit -s –amend 修改上次的提交

	abandon local branch(删除本地分支):
		repo abandon local_branch

	查看分支：
		repo branch

	checkout:
		git fetch ssh://nma1x@ctegerrit.sh.intel.com:29418/a/bsp/vendor/intel/ish-sensors refs/changes/02/15902/4 && git checkout FETCH_HEAD

	cherry pich:(将gerrit 上的patch 打到自己本地)：
		git fetch ssh://nma1x@ctegerrit.sh.intel.com:29418/a/bsp/vendor/intel/ish-sensors refs/changes/02/15902/4 && git cherry-pick FETCH_HEAD
	format patch:
		git fetch ssh://nma1x@ctegerrit.sh.intel.com:29418/a/bsp/vendor/intel/ish-sensors refs/changes/02/15902/4 && git format-patch -1 --stdout FETCH_HEAD
	pull:
		git pull ssh://nma1x@ctegerrit.sh.intel.com:29418/a/bsp/vendor/intel/ish-sensors refs/changes/02/15902/4

	create local branch, and switch to it:
		git checkout -b MS/VR/HMD remotes/origin/c/MS/VR/HMD


