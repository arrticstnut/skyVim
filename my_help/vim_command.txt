vim 命令及使用技巧
--maning
--20160414
================================================================================
vim简介及设计理念说明： {{{1

	(1)可以用于在任何类型的终端上编辑各式各样的文件。
	(2)Vim是一个高度可定制的文本编辑器，在Vi的基础上改进和增
加了很多特性。
	(3)VIM是纯粹的自由软件。
	(4)Vim和Emacs同样都是非常优秀的文本编辑器。
	(5)终端敲入vimtutor, 调用vim辅导(tutor)教程
	(6)终端输入man vim , 查看Manual page
	(7)ctrl+c=ESC
	尽可能少的呆在插入模式里面，VIM 的强大之处在于他的命令模式。

vim的设计理念是组合:
(a)命令组合(普通模式命令):
	dd  删除当前行，
	dj  删除当前行和下一行
    -- 原理是第一个d含义是删除,j键代表移动到下一行

	指定命令重复次数，2dd（重复dd两次），和dj效果一样。
	d^  删除行首到光标前的内容(不包含光标);
	d$  删除光标到行尾的内容(包含光标);

(b)模式间的组合:
在普通模式进入插入模式:
	a（append/追加）:当前光标后插入
	i（insert/插入）:当前光标前插入


================================================================================
一，基本命令 {{{1

vi编辑器的启动与退出 {{{2

　　1. vi的启动
	启动vi后，会进入一个临时缓冲区，

	文件存在，将其拷贝到一个临时缓冲区。
	文件不存在，将建立此文件；

　　(1) vi 　进入vi的一个临时缓冲区的首行。
　　(2) vi file1           打开文件到首行
　　(3) vi + file1         打开文件到最后一行
　　(4) vi +n file1        打开文件到n行
　　(5) vi +/string file1  打开文件到字符串string首次出现的位置
	(6) vi -O file1 file2 ...   以竖直分割窗口打开多个文件
		vi -o file1 file2 ...   以水平分割窗口打开多个文件



　　2. 退出vi(底行模式（last line mode）)
	<Esc>+:命令
　　退出vi前，先按ESC键，确保处于普通模式，再键入“：”(冒号)，输入下列命令，退出vi。
　　(1) :w          保存
　　:w filename     存入指定文件
　　:q              退出
　　(2) :wq         保存后退出。文件未被修改，会更新时间戳
　　(3) :x 或 ZZ    保存后退出。:x 文件未被修改，不会更新时间戳
　　(4) :q!(或:quit) 　　不保存,强制退出

    3.查看文件
    (1) 只读形式打开文件：
		vim -R file
    (2) 强制避免对文件进行修改：
		vim -M file
--------------------------------------------------------------------------------
comand line
q:
--------------------------------------------------------------------------------
J	combine two rows

D	delete to the end of line

--------------------------------------------------------------------------------
1. Scrolling downwards					*scroll-down*
ctrl-e
ctrl-f
--------------------------------------------------------------------------------
2. Scrolling upwards					*scroll-up*
ctrl-y
ctrl-u
ctrl-b
--------------------------------------------------------------------------------
3. Scrolling relative to cursor				*scroll-cursor*

z<CR>	Redraw, cursor line at top of window. Put cursor at first non-blank in the line.
zt		Like "z<CR>", but leave the cursor in the same column.

z.		Redraw, cursor line at center of window. Put cursor at first non-blank in the
		line. 
zz		Like "z.", but leave the cursor in the same column.
		Careful: If caps-lock is on, this command becomes
		"ZZ": write buffer and exit!

z-		Redraw, cursor line at bottom of window. Put cursor at first non-blank in the
		line.
zb		Like "z-", but leave the cursor in the same column.
--------------------------------------------------------------------------------
VISUAL mode + ctrl+g -> SELECT mode
Q	Switch to "Ex" mode.  Use the ":vi" command |:visual| to exit "Ex" mode.

--------------------------------------------------------------------------------
多标签切换|窗口拆分-tabnew

usage
:tabnew [++opt选项] [+cmd] 文件		建立对指定文件新的tab
:tabc      关闭当前的tab
:tabo      关闭所有其他的tab
:tabs      查看所有打开的tab
:tabp      前一个
:tabn      后一个

标准模式下：
gt , gT 可以直接在tab之间切换。

:help table

================================================================================
二，使用技巧 {{{1

--------------------------------------------------------------------------------
vimgrep和quickfix列表: {{{2
在文件及目录中查找字符串:
	(1)在所有打开的文件中查找字符串
	(2)在某一个目录及它的子目录中查找

	在路径和文件名符合{file}的所有文件中,查找符合{pattern}的
字符串：
	:vim(grep)     /{pattern}/[g][j]     {file} ...
	参数:
		g:    查找所有的关键字;	缺省,只查找一次关键字
		j:    只更新结果列表(quickfix); 缺省，VIM跳转至第一
			  个关键字所在的文件
    查找时，{pattern}可用正则表达式,使用起来和'/'命令是一样的.
    用grep同样可以达到这个效果,用vimgrep与系统无关,能适用于所
有系统的VIM,而且能自动识别文件编码和换行。

quickfix使用：
	:cw 或 :copen    打开quickfix列表查看结果，回车打开对应文件
	:cclose    关闭quickfix
	:cc    转到当前查找到的位置
	:cn    转到下一个位置
	:cp    转到前一个位置


例如：
1）在当前目录下的扩展名为php的所有文件中,查找字符串"the menu".
	:vimgrep /the menu/ *.php

2）在当前目录下的includes目录的所有文件中,查找字符串"the menu".
	:vimgrep /the menu/ ./includes/*.*

3）在当前目录及其子目录中查找：
	:vimgrep /the menu/ **/*.*
--------------------------------------------------------------------------------
buffers 切换:{{{2

-----------------
同时打开多个文件：
	vim test1 test2 test3
可用 :o 继续打开文件
	:o test4

---------------------------
查看当前buffer中的文件列表:
	:buffers
	:ls
	:files

缓冲文件的状态：
	-   非活动的缓冲区
	a   当前被激活缓冲区
	h   隐藏的缓冲区
	%   当前的缓冲区
	#   交换缓冲区
	=   只读缓冲区
	+   已经更改的缓冲区

-----------
切换缓冲区:
方式1:
	先用:buffers 查看所有的缓冲区，
	然后使用“:buffer 编号”或者“:buffer 文件名”切换：
	:buffer 1
	:buffer test1
方式2:
	切换上一个或下一个缓冲区，切换到第一个和最后一个缓冲区。文件比较少的时候
	:bn[ext]
	:bp[revious]
	:bl[ast]
	:bf[irst]

-----------
维护缓冲区:
维护一个简洁的缓冲区:
	(1)删除和当前工作不相关的缓冲区，
	(2)手动把和当前工作相关的文件加入到缓冲区：

	:badd test5
	:bd[elete] test4
	添加一个名为test5的缓冲区，删除缓冲区test4。

----------------
bufexplorer插件:
	bufexplorer提供了一些替换上面命令的快捷键，并且提供了一
个窗口，可以选择、删除缓冲区。

--------------------------------------------------------------------------------
基本计算器:
插入模式下，按下ctrl+r+=,输入一个算式，按enter,显示计算结果

查找重复的连续单次:
/\(\<\w\+\>\)\_s*\1

忘记用root方式打开文件时的文件保存:
:w !sudo tee %

删除标记内部的文字:
	di[标记]
	比如，光标放在开始的圆括号上，di( 
	类似的di{ di"
	 
删除指定标记前的内容：
	dt[标记]
	会删除所有光标和标记之间的内容（标记保持）
	例如，dt. 会删除至句子末尾，保持'.'不动

把vim 变为十六进制编辑器:
	:%!xxd
	恢复原来的状态:
	:%!xxd -r

把当前文件转化为网页:
:TOhtml


